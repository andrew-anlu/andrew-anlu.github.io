<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | 安路的技术博客]]></title>
  <link href="http://andrew-anlu.github.io/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://andrew-anlu.github.io/"/>
  <updated>2016-07-18T18:00:30+08:00</updated>
  <id>http://andrew-anlu.github.io/</id>
  <author>
    <name><![CDATA[安路]]></name>
    <email><![CDATA[andrewswift1987@gamil.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nodejs-代码的组织和部署]]></title>
    <link href="http://andrew-anlu.github.io/blog/2016/05/22/nodejs-dai-ma-de-zu-zhi-he-bu-shu/"/>
    <updated>2016-05-22T09:45:22+08:00</updated>
    <id>http://andrew-anlu.github.io/blog/2016/05/22/nodejs-dai-ma-de-zu-zhi-he-bu-shu</id>
    <content type="html"><![CDATA[<p>有经验的C程序员在编写一个新程序时首先从make文件写起，同样的，使用nodejs编写程序前，为了有个良好的开端，首先需要准备好代码的目录结构和部署方式，就如同修防止要先搭建脚手架。本章将介绍与之相关的各种知识</p>

<!--more-->


<ul>
<li><a href="#%E6%A8%A1%E5%9D%97%E8%B7%AF%E5%BE%84%E7%9A%84%E8%A7%A3%E6%9E%90%E8%A7%84%E5%88%99">模块路径的解析规则</a></li>
<li><a href="#%E5%8C%85">包</a></li>
<li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F">命令行程序</a></li>
<li><a href="#%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95">工程目录</a></li>
<li><a href="#NPM">NPM</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li>
</ul>


<h2><a name="模块路径的解析规则">模块路径的解析规则</a></h2>

<p>我们已经知道，require函数支持斜杠(/)或者盘符(C:)开头的绝对路径，也支持./开头的相对路径。但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发而动全身。因此，require函数支持第三种形式的路径，写法类似foo/bar,并依次按照以上规则解析路径，知道找到模块位置。</p>

<h3>内置模块</h3>

<p>如果传递给require函数的是nodejs内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require(&lsquo;fs&rsquo;)</p>

<h3>node_modules目录</h3>

<p>nodejs定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是 /home/user/hello.js,在该模块中使用require(&lsquo;foo/bar&rsquo;)方式加载模块时，则Nodejs依次尝试使用以下路径.</p>

<pre><code> /home/user/node_modules/foo/bar
 /home/node_modules/foo/bar
 /node_modules/foo/bar
</code></pre>

<h3>NODE_PATH环境变量</h3>

<p>与PATH 环境变量类似，nodejs允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在LInux下使用<code>:</code>分隔，在windows下使用;分隔。例如定义了以下NODE_PATH环境变量:</p>

<pre><code> NODE_PATH=/home/user/lib:/home/lib
</code></pre>

<p>当使用require(&lsquo;foo/bar&rsquo;)的方式加载模块时，则nodejs依次尝试以下路径:</p>

<pre><code>/home/user/lib/foo/bar
/home/lib/foo/bar
</code></pre>

<h2><a name="包">包</a></h2>

<p>我们已经知道了JS模块的基本单位是单个JS文件，但复杂些的模块往往由多个子模块组成，为了便于管理和使用，我们可以把由多个子模块组成的大模块称做包，并把所有子模块放在同一个目录里。</p>

<p>在组成一个包的所有子模块中，需要有个入口模块，入口模块的导出对象被作为包的导出对象。例如有以下目录结构。</p>

<pre><code>- /home/user/lib/
    - cat/
        head.js
        body.js
        main.js
</code></pre>

<p>其中cat目录定义了一个包，其中包含了3个子模块。main.js作为入口模块，其内容如下：</p>

<pre><code>var head = require('./head');
var body = require('./body');

exports.create = function (name) {
    return {
        name: name,
        head: head.create(),
        body: body.create()
    };
};
</code></pre>

<p>在其它模块里使用包的时候，需要加载包的入口模块。接着上例，使用<code>require('/home/user/lib/cat/main')</code>能达到目的，但是入口模块名称出现在路径里看上去不是个好主意，因此我们需要做点额外的工作，让包使用起来更像是单个模块。</p>

<h3>index.js</h3>

<p>当模块的文件件是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价:</p>

<pre><code>var cat = require('/home/user/lib/cat');
var cat = require('/home/user/lib/cat/index');
</code></pre>

<p>这样处理后，就只需要把包目录路径传递给require函数，感觉上整个目录被当做单个模块使用，更有整体感。</p>

<h3>package.json</h3>

<p>如果想自定义入口模块的文件名和存放位置，就需要在包目录下包含一个package.json文件，并在其中指定入口模块的路径，上例中的cat模块可以重构如下。</p>

<pre><code>- /home/user/lib/
    - cat/
        + doc/
        - lib/
            head.js
            body.js
            main.js
        + tests/
        package.json
其中package.json内容如下。

{
    "name": "cat",
    "main": "./lib/main.js"
}
</code></pre>

<p>如此一来，就同样可以使用require(&lsquo;/home/user/lib/cat&rsquo;)的方式加载模块。nodejs会根据包目录下的package.json找到入口模块所在位置。</p>

<h2><a name="命令行程序">命令行程序</a></h2>

<p>使用Nodejs编写的东西，要么是一个包，要么是一个命令行程序，而前者最终也会用于开发后者。因此我们在部署代码时需要一些技巧，让用户觉得自己是在使用一个命令行程序。</p>

<p>例如我们用nodejs写了个程序，可以把命令行参数原样打印出来。该程序很简单，在主模块内实现了所有功能。并且写好后，我们把该程序部署在<code>/home/user/bin/node-echo.js</code>这个位置。为了在任何目录下都能运行该程序，我们需要用以下终端命令。</p>

<pre><code>$ node /home/user/bin/node-echo.js Hello World
Hello World
</code></pre>

<p>这种使用方式看起来不怎么像是一个命令行程序，下边的才是我们期望的方式：</p>

<pre><code>$ node-echo Hello World
</code></pre>

<h3>Linux</h3>

<p>在linux系统下，我们可以把JS文件当做shell脚本来运行，从而达到上述目的，具体步骤如下：</p>

<p>在shell脚本中，可以通过 #! 注释来指定当前脚本使用的解析器。所以我们首先在 node-echo.js文件顶部增加以下一行注释，表明当前脚本使用nodejs解析。</p>

<pre><code> #! /usr/bin/env node
</code></pre>

<p>NodeJs会忽略掉位于JS模块首行的 <code>#!</code>注释，不必担心这行注释是非法语句。</p>

<p>然后，我们使用以下命令赋予node-echo.js文件执行权限。</p>

<pre><code> $ chmod +x /home/user/bin/node-echo.js
</code></pre>

<p>最后，我们在PATH环境变量中指定的某个目录下，例如在 /usr/local/bin下创建了一个软连接文件，文件名与我们希望使用的终端命令同名，命令如下：</p>

<pre><code> $ sudo ln -s /home/user/bin/node-echo.js /usr/local/bin/node-echo
</code></pre>

<p>这样处理后，我们就可以在任何目录下使用 node-echo 命令了。</p>

<h2><a name="工程目录">工程目录</a></h2>

<p>了解了以上知识后，现在我们可以来完整地规划一个工程目录了。以编写一个命令行程序为例，一般我们会同时提供命令行模式和API模式两种使用方式，并且我们会借助三方包来编写代码。除了代码外，一个完整的程序也应该有自己的文档和测试用例。因此，一个标准的工程目录都看起来像下边这样。</p>

<pre><code>- /home/user/workspace/node-echo/   # 工程目录
    - bin/                          # 存放命令行相关代码
        node-echo
    + doc/                          # 存放文档
    - lib/                          # 存放API相关代码
        echo.js
    - node_modules/                 # 存放三方包
        + argv/
    + tests/                        # 存放测试用例
    package.json                    # 元数据文件
    README.md                       # 说明文件
</code></pre>

<p>其中部分文件内容如下:</p>

<pre><code>/* bin/node-echo */
var argv = require('argv'),
    echo = require('../lib/echo');
console.log(echo(argv.join(' ')));

/* lib/echo.js */
module.exports = function (message) {
    return message;
};

/* package.json */
{
    "name": "node-echo",
    "main": "./lib/echo.js"
}
</code></pre>

<h2><a name="NPM">NPM</a></h2>

<p>NPM是随同nodejs一起安装的包管理工具，能解决nodejs代码部署上的很多问题，常见的使用场景有以下几种：</p>

<ul>
<li>允许用户从NPM服务器上下载被人编写的三方包到本地使用</li>
<li>允许用户从NPM服务器上下载并安装别人编写的命令行程序到本地使用</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</li>
</ul>


<p>可以看到，NPM建立了一个nodejs生态圈，nodejs开发者和用户可以在里面胡同有无。以下分别介绍这三种场景下怎样使用NPM</p>

<h3>下载三方包</h3>

<p>需要使用第三方包时，首先得知道有那些包可用。虽然 nspmjs.org提供了搜索框可以根据报名来搜索，但如果连想使用的第三方包的名字都不确定的话，就请百度一下吧。知道了包名之后，比如上边中的argv,就可以在工程目录中打开终端，使用以下命令下载第三方包</p>

<pre><code>$ npm install argv
...
argv@0.0.2 node_modules\argv
</code></pre>

<p>下载后之后，argb包就放在了工程目录下的node_modules目录中，因此在代码中只需要通过<code>require('argv')</code>的方式就好，无需指定第三方的包路径</p>

<p>以上命令默认下载最新版的第三方包，如果想要下载指定版本的话，可以在包名边上加上@(version),例如通过以下命令可以下载0.0.1版的argv</p>

<pre><code>$ npm install argv@0.0.1
...
argv@0.0.1 node_modules\argv
</code></pre>

<p>如果使用到的第三方包比较多，在终端下一个包一条命令地安装未免太费劲了，因此NPM对 package.json的字段做了扩展，允许在其中申明三方包依赖，因此，上边的例子中的package.json可以改写如下:</p>

<pre><code>{
    "name": "node-echo",
    "main": "./lib/echo.js",
    "dependencies": {
        "argv": "0.0.2"
    }
}
</code></pre>

<p>这样处理后，在工程目录下就可以使用npm install 命令批量安装第三方包了。更重要的是，当以后node_echo也上传到了NPM服务器，别人下载这个包时，NPM会根据包中申明的第三方包依赖自动下载进一步依赖的三方包。例如，使用 <code>npm install node-echo</code> 命令时，NPM会自动创建一下目录结构：</p>

<pre><code>- project/
    - node_modules/
        - node-echo/
            - node_modules/
                + argv/
            ...
    ...
</code></pre>

<p>如此一来，用户只需关心自己直接使用的第三方包，不需要自己去解决所有包的依赖关系。</p>

<h3>安装命令行程序</h3>

<p>从NPM服务器上下载安装一个命令行程序的方法与三方包类似，例如上例中的node-echo提供了命令行使用方式，只要node-echo自己配置好了相关的package.json字段，对于用户而言，只需要使用以下命令安装程序。</p>

<pre><code>$ npm install node-echo -g
</code></pre>

<p>参数中的 -g 表示全局安装，因此node-echo会默认安装到以下位置，并且NPM会自动创建好Linux系统下需要的软连接或windows系统下需要的.cmd文件。</p>

<pre><code>- /usr/local/               # Linux系统下
    - lib/node_modules/
        + node-echo/
        ...
    - bin/
        node-echo
        ...
    ...

- %APPDATA%\npm\            # Windows系统下
    - node_modules\
        + node-echo\
        ...
    node-echo.cmd
    ...
</code></pre>

<h3>发布代码</h3>

<p>第一次使用NPM发布代码前需要注册一个账号。终端下运行 npm adduser,之后按照提示做即可。账号搞定后，接着我们需要编辑 package.json文件，加入NPM必需的字段。接着上边 node-echo的例子，package.json 里必要的字段如下:</p>

<pre><code>{
    "name": "node-echo",           # 包名，在NPM服务器上须要保持唯一
    "version": "1.0.0",            # 当前版本号
    "dependencies": {              # 三方包依赖，需要指定包名和版本号
        "argv": "0.0.2"
      },
    "main": "./lib/echo.js",       # 入口模块位置
    "bin" : {
        "node-echo": "./bin/node-echo"      # 命令行程序名和主模块位置
    }
}
</code></pre>

<p>之后，我们就可以在package.json所在目录下运行 npm publish 发布代码了。</p>

<h3>版本号</h3>

<p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。</p>

<p>语义版本号分为X.Y.Z三位，分别代表主版本号，次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p>

<pre><code>+ 如果只是修复bug，需要更新Z位。

+ 如果是新增了功能，但是向下兼容，需要更新Y位。

+ 如果有大变动，向下不兼容，需要更新X位。
</code></pre>

<h3>灵机一点</h3>

<p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。除了可以在npmjs.org/doc查看官方文档之外，这里再介绍一些NPM常用命令</p>

<ul>
<li>NPM提供了很多命令，例如install和publish，使用NPM help可查看所有命令</li>
<li>使用 npm help 可查看某条命令的详细帮助，例如 npm help install</li>
<li>在package.json所在目录下使用 <code>npm install -g</code>可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>
<li>使用<code>npm update &lt;package&gt;</code>可以把当前目录下node_modules子目录边的对应模块更新至最新版本</li>
<li>使用<code>npm update &lt;package&gt; -g</code>可以把全局安装的对应命令行程序更新至最新版</li>
<li>使用<code>npm cache clear</code>可以清空 NPM本地缓存，用于对付使用相同版本号发布新版本代码的人</li>
<li>使用<code>npm unpublish &lt;package&gt;@&lt;version&gt;</code>可以撤销发布自己发不过的某个版本</li>
</ul>


<h2><a name="小结">小结</a></h2>

<ul>
<li>编写代码前先规划好目录结果，才能做到有条不紊</li>
<li>稍大些的程序可以将代码拆分为多个模块管理，更大些的程序可以使用包来组织模块</li>
<li>合理使用 node_modules和NODE_PATH来解耦包的使用方式和物理路径</li>
<li>使用NPM加入Nodejs生态圈互通有无</li>
<li>想到了心仪的包名时请提前在NPM上抢注</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodejs基础]]></title>
    <link href="http://andrew-anlu.github.io/blog/2016/05/21/nodejsji-chu/"/>
    <updated>2016-05-21T12:45:39+08:00</updated>
    <id>http://andrew-anlu.github.io/blog/2016/05/21/nodejsji-chu</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFNodeJS">什么是NodeJS</a></li>
<li><a href="#%E7%94%A8%E9%80%94">用途</a></li>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C">运行</a></li>
<li><a href="#%E6%A8%A1%E5%9D%97">模块</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li>
</ul>


<!--more-->


<h2><a name="什么是NodeJS">什么是NodeJS</a></h2>

<p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在 HTML 页面里的 JS，浏览器充当了解析器的角色。而对于需要独立运行的 JS，NodeJS 就是一个解析器。</p>

<p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许 JS 使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作 DOM，浏览器就提供了 document 之类的内置对象。而运行在 NodeJS 中的 JS 的用途是操作磁盘文件或搭建 HTTP 服务器，NodeJS 就相应提供了 fs、http 等内置对象。</p>

<h2><a name="用途">用途</a></h2>

<p>尽管存在一听说可以直接运行JS文件就觉得很酷的同学，但大多数同学在接触新东西时首先关心的有啥用户，以及能带来什么价值</p>

<p>NodeJS的作者说，他创造NodeJS的目的是为了实现提高性能web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的DOM事件，并且拥有一大群程序员，因此就成了天然的选择。</p>

<p>如他所愿，NodeJs在服务器端活跃起来，出现了大批基于NodeJs的web服务。而另一方面，NOdeJS让前端如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p>

<p>因此，对于前端而言，虽然不是人人都要拿NodeJs写一个服务器端程序，但简单使用命令交互模式调试JS片段，复杂可至编写工具提升工作效率。</p>

<p>NodeJS生态圈正欣欣向荣</p>

<h2><a name="安装">安装</a></h2>

<p>NodeJs提供了一些安装程序，都可以在nodejs.org这里下载并安装</p>

<p>在MacOs系统下，选择.pkg后缀的安装文件.</p>

<h3>编译安装</h3>

<p>Linux系统下没有现成的安装程序可用，虽然一些发行版可以使用 apt-get之类的方式安装，但不一定能安装到最新版。因此Linux系统下一班使用以下方式编译方式安装NodeJs。</p>

<ol>
<li>确保系统下 g++版本在4.6以上，python版本在2.6以上</li>
<li>从nodejs.org下载tar.gz后缀的NodeJS最新版源代码包并解压到某个位置</li>
<li>进入解压到的目录，使用以下命令编译和安装</li>
</ol>


<pre><code>$ ./configure

$ make

$ sudo make install
</code></pre>

<h2><a name="运行">运行</a></h2>

<p>打开终端，键入node进入命令交互模式，可以输入一条语句后立即执行并显示效果，例如:</p>

<pre><code>$ node
&gt; console.log('Hello World!');
Hello World!
</code></pre>

<p>如果要运行一大段代码的话，可以先写一个JS文件再运行，例如有以下hello.js</p>

<pre><code>function hello() {
    console.log('Hello World!');
}
hello();
</code></pre>

<p>写好后，在终端键入 node hello.js运行，结果如下:</p>

<pre><code>$ node hello.js
Hello World!
</code></pre>

<h3>权限问题</h3>

<p>在Linux系统下，使用NodeJs监听80或者443端口提供HTTP(s)服务时需要root权限，有两种方式可以做到.</p>

<p>一种方式是使用sudo命令运行NodeJs,例如通过以下命令运行的server.js中有权限使用80和443端口，一般推荐这种方式，可以保证仅为有需要的js脚本提供root权限。</p>

<pre><code>$ sudo node server.js
</code></pre>

<p>另一种方式是使用chmod + s 命令让NodeJs总是以root权限运行，具体做法如下，因为这种方式让任何JS脚本都有了root权限，不太安全，因此在需要很考虑安全下不推荐使用：</p>

<pre><code>$ sudo chown root /usr/local/bin/node
$ sudo chmod +s /usr/local/bin/node
</code></pre>

<h2><a name="模块">模块</a></h2>

<p>编写稍大一点的程序时一般都会讲代码模块化，在NOdeJs中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名.</p>

<p>在编写每一个模块时，都有 <code>require</code>,<code>exports</code>,<code>module</code>三个预先定义好的变量可供使用。</p>

<h3>3 Require</h3>

<p>require函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径(以./开头)，或者是绝对路径(以/或C:之类的盘符开头).另外，模块名中的.js扩展名可以省略。以下是一个例子:</p>

<pre><code>var foo1 = require('./foo');
var foo2 = require('./foo.js')
var foo3 = require('/home/user/foo')
var foo4 = require('/home/user/foo.js')
</code></pre>

<p>//foo1至foo4中保存的是统一模块的导出对象。另外可以使用以下方式加载和使用一个JSON文件。</p>

<pre><code>var data = require('./data.json')
</code></pre>

<h3>exports</h3>

<p>exports对象是当前模块的导出对象，用于导出模块共有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个共有方法.</p>

<pre><code>exports.hello = function () {
    console.log('Hello World!');
};
</code></pre>

<p>以上代码中，模块默认导出对象被替换为一个函数。</p>

<h3>模块初始化</h3>

<p>一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。</p>

<h3>主模块</h3>

<p>通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。住模块负责调度祖成整个程序的其它模块完成工作，例如通过以下命令启动程序时，main.js就是主模块.</p>

<pre><code>$ node main.js
</code></pre>

<p>完整示例:</p>

<p>例如有以下目录:</p>

<pre><code>- /home/user/hello/
    - util/
        counter.js
    main.js
</code></pre>

<p>其中counter.js内容如下:</p>

<pre><code>var i = 0;

function count() {
    return ++i;
}

exports.count = count;
</code></pre>

<p>该模块内部定义了一个私有变量i,并在exports对象导出了一个共有方法count.</p>

<p>主模块main.js内容如下：</p>

<pre><code>var counter1 = require('./util/counter');
var    counter2 = require('./util/counter');

console.log(counter1.count());
console.log(counter2.count());
console.log(counter2.count());
</code></pre>

<p>运行该程序的结果如下:</p>

<pre><code>$ node main.js
1
2
3
</code></pre>

<p>可以看到，counter.js并没有因为被require了两次而初始化两次</p>

<h2><a name="小结">小结</a></h2>

<p>本章介绍了有关NodeJs的基本概念和使用方法，总结起来有以下知识点:</p>

<ul>
<li>NodeJs是一个js脚本解析器，任何操作系统下安装NodeJS本质上做的事情都是把nodejs执行程序复制到一个目录，然后保证这个目录在系统PATH环境变量下，以便终端下可以使用node命令</li>
<li>终端下直接输入node命令可进入命令交互模式，很适合用来测试一些JS代码片段，比如正则表达式</li>
<li>nodejs使用CMD模块系统，主模块作为程序入口点，所有模块在执行剁成中只初始化一次。</li>
<li>除非JS模块不能满足需求，否则不要轻易使用二进制模块，否则你的用户会叫苦连天</li>
<li></li>
</ul>

]]></content>
  </entry>
  
</feed>
